AC_INIT(drivemount/drivemount.c)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(gnome-applets, 2.13.3)

AM_MAINTAINER_MODE

AC_CONFIG_MACRO_DIR(m4)

AC_PROG_INTLTOOL

AC_ISC_POSIX
AC_PROG_CC
AC_STDC_HEADERS
AM_PROG_LIBTOOL
AC_PATH_PROGS(PATH_TO_XRDB, "xrdb")
AC_PATH_XTRA
X_LIBS="$X_LIBS $X_PRE_LIBS -lX11 $X_EXTRA_LIBS"
AC_SUBST(X_LIBS)

GNOME_COMPILE_WARNINGS

dnl Check for non-portable headers
AC_CHECK_HEADERS([pty.h values.h])

dnl Stuff we might need, not quite sure yet

GTK_REQUIRED=2.5.0
GLIB_REQUIRED=2.5.0
LIBGNOME_REQUIRED=2.8.0
LIBGNOMEUI_REQUIRED=2.8.0
GNOME_VFS_REQUIRED=2.8.0
GCONF_REQUIRED=2.8.0
SCROLLKEEPER_REQUIRED=0.1.4
LIBPANEL_REQUIRED=2.13.4
LIBGTOP_REQUIRED=2.11.92
LIBGLADE_REQUIRED=2.4.0
LIBGAIL_REQUIRED=1.1.0
LIBXKLAVIER_REQUIRED=1.13
LIBWNCK_REQUIRED=2.9.3
SYSTEM_TOOLS_BACKENDS_REQUIRED=1.1.3
LIBGNOME_DESKTOP_REQUIRED=2.11.1
LIBNOTIFY_REQUIRED=0.3.2
HAL_REQUIRED=0.5.3
DBUS_GLIB_REQUIRED=0.34

dnl Stolen from nautilus' configure.in *g*
AC_ARG_ENABLE(more-warnings,
[  --enable-more-warnings  Maximum compiler warnings],
set_more_warnings="$enableval",[
    set_more_warnings=no
])
AC_MSG_CHECKING(for more warnings, including -Werror)
if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
    AC_MSG_RESULT(yes)
    CFLAGS="\
    -Wall \
    -Wchar-subscripts -Wmissing-declarations -Wmissing-prototypes \
    -Wnested-externs -Wpointer-arith \
    -Wcast-align -Wsign-compare \
    -std=gnu89 \
    $CFLAGS"

    for option in -Wno-strict-aliasing -Wno-sign-compare; do
        SAVE_CFLAGS="$CFLAGS"
        CFLAGS="$CFLAGS $option"
        AC_MSG_CHECKING([whether gcc understands $option])
        AC_TRY_COMPILE([], [],
            has_option=yes,
            has_option=no,)
        if test $has_option = no; then
            CFLAGS="$SAVE_CFLAGS"
        fi
        AC_MSG_RESULT($has_option)
        unset has_option
        unset SAVE_CFLAGS
    done
    unset option
else
    AC_MSG_RESULT(no)
fi





dnl ******************************************
dnl ** pkg-config dependency checks         **
dnl ******************************************

PKG_CHECK_MODULES(GAILUTIL, gail >= $LIBGAIL_REQUIRED)
AC_SUBST(GAILUTIL_CFLAGS)
AC_SUBST(GAILUTIL_LIBS)

PKG_CHECK_MODULES(GTK, gtk+-2.0 >= $GTK_REQUIRED)
AC_SUBST(GTK_FLAGS)
AC_SUBST(GTK_LIBS)

PKG_CHECK_MODULES(GNOME_APPLETS, libpanelapplet-2.0 >= $LIBPANEL_REQUIRED)
AC_SUBST(GNOME_APPLETS_CFLAGS)
AC_SUBST(GNOME_APPLETS_LIBS)

PKG_CHECK_MODULES(GNOME_LIBS2, libgnome-2.0 >= $LIBGNOME_REQUIRED libgnomeui-2.0 >= $LIBGNOMEUI_REQUIRED)
AC_SUBST(GNOME_LIBS2_CFLAGS)
AC_SUBST(GNOME_LIBS2_LIBS)

PKG_CHECK_MODULES(GNOMEDESKTOP, gnome-desktop-2.0 >= $LIBGNOME_DESKTOP_REQUIRED)
AC_SUBST(GNOMEDESKTOP_CFLAGS)
AC_SUBST(GNOMEDESKTOP_LIBS)

build_gnome_vfs_applets=false
PKG_CHECK_MODULES(GNOME_VFS_APPLETS, 
		  [gnome-vfs-2.0 >= $GNOME_VFS_REQUIRED],
		  build_gnome_vfs_applets=true,)
AC_SUBST(GNOME_VFS_APPLETS_CFLAGS)
AC_SUBST(GNOME_VFS_APPLETS_LIBS)
AM_CONDITIONAL(BUILD_GNOME_VFS_APPLETS, $build_gnome_vfs_applets)

PKG_CHECK_MODULES(LIBGLADE, libglade-2.0 >= $LIBGLADE_REQUIRED)
AC_SUBST(LIBGLADE_CFLAGS)
AC_SUBST(LIBGLADE_LIBS)

AC_PATH_PROG(GDK_PIXBUF_CSOURCE, gdk-pixbuf-csource, no)
AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

if test x"$GDK_PIXBUF_CSOURCE" = xno; then
  AC_MSG_ERROR([gdk-pixbuf-csource executable not found in your path - should be installed with GTK])
fi 
  
AC_SUBST(GDK_PIXBUF_CSOURCE)

AC_PATH_PROG(GCONFTOOL, gconftool-2, no)

if test x"$GCONFTOOL" = xno; then
  AC_MSG_ERROR([gconftool-2 executable not found in your path - should be installed with GConf])
fi

AM_GCONF_SOURCE_2

dnl checking for xsltproc

AC_PATH_PROG(XSLTPROC, xsltproc, no)

if test x"$XSLTPROC" = xno; then
  AC_MSG_ERROR([xsltproc executable not found in your path - should be installed with libxslt])
fi

dnl Still need to decide on the checks for these

build_gtop_applets=false
PKG_CHECK_MODULES(GTOP_APPLETS,
                 [libgtop-2.0 >= $LIBGTOP_REQUIRED],
                 build_gtop_applets=true,
		 AC_MSG_WARN([libgtop not found. Not building gtop applets.]))
AC_SUBST(GTOP_APPLETS_CFLAGS)
AC_SUBST(GTOP_APPLETS_LIBS)
AM_CONDITIONAL(BUILD_GTOP_APPLETS, $build_gtop_applets)

dnl Setup for libxklavier
PKG_CHECK_MODULES(LIBXKLAVIER, libxklavier >= $LIBXKLAVIER_REQUIRED,,
    AC_MSG_ERROR([libxklavier was not found and is required to build gnome-applets.
Please get the latest version from http://freedesktop.org/Software/LibXklavier], 1))

AC_SUBST(LIBXKLAVIER_CFLAGS)
AC_SUBST(LIBXKLAVIER_LIBS)

AC_ARG_ENABLE(flags,
[  --enable-flags          Enable flags usage in the keyboard indicators],
, enable_flags=no)
AM_CONDITIONAL(ENABLE_FLAGS, test x$enable_flags != xno)

PKG_CHECK_MODULES(LIBWNCK, libwnck-1.0 >= $LIBWNCK_REQUIRED,,
	AC_MSG_ERROR([libwnck is required to build gnome-applets.], 1))

AC_SUBST(LIBWNCK_CFLAGS)
AC_SUBST(LIBWNCK_LIBS)

dnl ==============
dnl gswitchit
dnl ==============
dnl Make sure the new cvs virtual include has been checked out
AC_MSG_CHECKING([for inclusion of libgswitchit])
if test ! -d "$srcdir/libgswitchit"; then
    AC_MSG_RESULT(no)
    AC_MSG_ERROR([Your checkout of gnome-applets is out of date.
    The 'libgswitchit' module has been virtually included into
    gnome-applets by CVS as a subdirectory.  Please check
    out again (this can be done on top of your existing checkout])
else
   AC_MSG_RESULT(yes)
fi

AC_MSG_CHECKING([for inclusion of libkbdraw])
if test ! -d "$srcdir/libkbdraw"; then
    AC_MSG_RESULT(no)
    AC_MSG_ERROR([Your checkout of gnome-applets is out of date.
    The 'libkbdraw' module has been virtually included into
    gnome-applets by CVS as a subdirectory.  Please check
    out again (this can be done on top of your existing checkout])
else
   AC_MSG_RESULT(yes)
fi

AM_CONDITIONAL(INCLUDE_GSWITCHIT_DEVEL, true)  dnl pull devel from applet

dnl ************************
dnl **   Set up gettext   **
dnl ************************
ALL_LINGUAS="am ar az be bg bn bs ca cs cy da de el en_CA en_GB es et eu fa fi fr ga gl gu he hi hr hu hy id is it ja ko ku ky lt lv mk ml mn ms nb 
ne nl nn no pa pl pt pt_BR ro ru rw sk sl sq sr sr@Latn sv ta te th tr uk vi wa xh zh_CN zh_HK zh_TW"

GETTEXT_PACKAGE=gnome-applets-2.0
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [Gettext Package])
AC_DEFINE_DIR(GNOMELOCALEDIR, "${datadir}/locale", [locale directory])
AM_GLIB_GNU_GETTEXT

# this is the directory where the *.{mo,gmo} files are installed
gnomelocaledir='${prefix}/${DATADIRNAME}/locale'
AC_SUBST(gnomelocaledir)

dnl gnome-doc-utils stuff

GNOME_DOC_INIT


dnl ******************************************
dnl ** Check for Scrollkeeper               **
dnl ******************************************

AC_PATH_PROG(SCROLLKEEPER_CONFIG, scrollkeeper-config, no)
if test x$SCROLLKEEPER_CONFIG = xno; then
  AC_MSG_ERROR(Couldn't find scrollkeeper-config, please install the Scrollkeeper 0.1.4 package)
fi
AC_SUBST(SCROLLKEEPER_REQUIRED)

dnl ******************************************
dnl ******************************************


dnl ******************************************
dnl **  Test whether jw is installed        **
dnl ******************************************

AC_PATH_PROG(JW, jw, no)
if test x$JW = xno; then
  HAVE_JW="no"
else
  HAVE_JW="yes"
fi
AM_CONDITIONAL(HAVE_JW, test "x$HAVE_JW" = "xyes")
AC_SUBST(HAVE_JW)

case "$host" in
sparc-*-solaris*)	gkb_type_sun=true;;
*)			gkb_type_sun=false;;
esac
AM_CONDITIONAL(GKB_SUN, $gkb_type_sun)

dnl ******************************************
dnl ** battstat check			    **
dnl ******************************************

dnl --disable-battstat=(yes|no)
AC_ARG_ENABLE(battstat,
	      [  --disable-battstat=[[no/yes]]
                          don't build battery monitor applet [[default: no]]],,
	      disable_battstat=no)

HAVE_LIBAPM=no
NEED_LIBAPM=no
ACPIINC=
build_battstat_applet=no

if test x$disable_battstat = xno; then
   build_battstat_applet=yes
   case "${host}" in
       powerpc-*-linux*)
           NEED_LIBAPM=yes
           AC_CHECK_LIB(apm,apm_read,[HAVE_LIBAPM=yes],[HAVE_LIBAPM=no])
	   ;;
       # list of supported OS cores that use libapm
       *-*-linux*)
	   NEED_LIBAPM=yes
	   AC_CHECK_LIB(apm,apm_read,[HAVE_LIBAPM=yes],[HAVE_LIBAPM=no])
	   ;;
       # list of supported OS cores that do not use libapm
       i386-*-freebsd*|*-*-netbsd*|*-*-openbsd*|*-*kfreebsd*-gnu)
          if [ -n "${OS_SYS}" ]; then
	       ACPIINC="-I${OS_SYS}"
	   else
	       ACPIINC="-I/usr/src/sys"
	   fi

	   savecppflags=$CPPFLAGS
	   CPPFLAGS="$CPPFLAGS $ACPIINC"
	   AC_CHECK_HEADER(dev/acpica/acpiio.h, have_acpiio=true, have_acpiio=false)
	   if test $have_acpiio = true; then
	     AC_DEFINE(HAVE_ACPIIO, 1, [Define if acpiio.h exists on the system])
	   fi

	   ;;
       *)
	   echo "warning: ${host} is not supported by battstat_applet, not building" >&2
	   build_battstat_applet=no
	   ;;
    esac
fi

AC_SUBST(HAVE_LIBAPM)
AC_SUBST(NEED_LIBAPM)
AC_SUBST(ACPIINC)
AM_CONDITIONAL(HAVE_LIBAPM, test "x$HAVE_LIBAPM" = "xyes")
AM_CONDITIONAL(NEED_LIBAPM, test "x$NEED_LIBAPM" = "xyes")
AM_CONDITIONAL(BUILD_BATTSTAT_APPLET, test x$build_battstat_applet = xyes)

dnl *******************************************
dnl ** Mini-Commander checks                 **
dnl *******************************************
AC_ARG_ENABLE(mini-commander, [  --enable-mini-commander build mini-commander
                          [[default: no, transparent upgrade to deskbar-applet]]], enable_mini_commander="yes", enable_mini_commander="no")
AM_CONDITIONAL(BUILD_MINICOMMANDER_APPLET, test "x$enable_mini_commander" = "xyes")

dnl *******************************************
dnl ** mixer applet check                    **
dnl *******************************************

GST_MAJORMINOR=auto
AC_ARG_WITH(gstreamer,
            AC_HELP_STRING([--with-gstreamer],[use gstreamer version for mixer if available]),
            [case "${withval}" in
               0.8) GST_MAJORMINOR=0.8 ;;
               0.10) GST_MAJORMINOR=0.10 ;;
               *) AC_MSG_ERROR([
                                *** Bad value ${withval} for --with-gstreamer
                                *** Please use one of the following:
                                ***    --with-gstreamer=0.8
                                ***    --with-gstreamer=0.10
                              ]);;
             esac])

GST10_REQS=0.10.2
GST10_PKGS="gstreamer-0.10 >= $GST10_REQS gstreamer-plugins-base-0.10 >= $GST10_REQS"
GST8_REQS=0.8.0
GST8_PKGS="gstreamer-0.8 >= $GST8_REQS gstreamer-interfaces-0.8 >= $GST8_REQS"

if test "x$GST_MAJORMINOR" = "xauto" -o "x$GST_MAJORMINOR=x0.10"; then
   # try for GStreamer 0.10
   MIXER_CFLAGS=
   MIXER_LIBS=
   PKG_CHECK_MODULES(MIXER, $GST10_PKGS, HAVE_GST_VER=0.10, HAVE_GST_VER=none)
fi

if test "x$GST_MAJORMINOR x$HAVE_GST_VER" = "xauto xnone" -o "x$GST_MAJORMINOR" = "x0.8" ; then
   # try for GStreamer 0.8
   MIXER_CFLAGS=
   MIXER_LIBS=
   PKG_CHECK_MODULES(MIXER, $GST8_PKGS, HAVE_GST_VER=0.8, HAVE_GST_VER=none)
fi



case $HAVE_GST_VER in
	0.8|0.10)
		HAVE_GST="yes"
		AC_MSG_RESULT([    using GStreamer $HAVE_GST_VER backend])
		;;
	none)
		HAVE_GST="no"
		AC_MSG_RESULT([GStreamer not found])
		AC_MSG_WARN([GStreamer unavailable, mixer applet will not be build])
		;;
	*)
		AC_MSG_ERROR([Something bad happened when determining GStreamer version, aborting!])
		;;
esac

AM_CONDITIONAL(APPLET_MIXER, test "x$HAVE_GST" = "xyes")
AM_CONDITIONAL(HAVE_GST10, test "x$HAVE_GST_VER" = "x0.10")
if test "x$HAVE_GST_VER" = "x0.10" ; then
	AC_DEFINE(HAVE_GST10, 1, [Using Gstreamer 0.10])
	# these don't seem to come from any pkg-config file
	MIXER_LIBS="$MIXER_LIBS -lgstinterfaces-0.10 -lgstaudio-0.10"
fi

AC_SUBST(MIXER_CFLAGS)
AC_SUBST(MIXER_LIBS)

dnl ***************************************
dnl ** Check for libnotify               **
dnl ***************************************

LIBNOTIFY_CFLAGS=
LIBNOTIFY_LIBS=
PKG_CHECK_MODULES(LIBNOTIFY, libnotify >= $LIBNOTIFY_REQUIRED,
		  HAVE_LIBNOTIFY="yes", HAVE_LIBNOTIFY="no")

if test "x$HAVE_LIBNOTIFY" = "xyes"; then
	AC_DEFINE(HAVE_LIBNOTIFY, 1, [libnotify available])
fi

AC_SUBST(LIBNOTIFY_CFLAGS)
AC_SUBST(LIBNOTIFY_LIBS)

dnl ***************************************
dnl ** Check for libhal                  **
dnl ***************************************

HAL_CFLAGS=
HAL_LIBS=
AC_ARG_WITH(hal,[  --without-hal           build without hal support])

if test "x$with_hal" != xno; then

 PKG_CHECK_MODULES(HAL, hal >= $HAL_REQUIRED dbus-glib-1 >= $DBUS_GLIB_REQUIRED,
		  HAVE_HAL="yes",
		  HAVE_HAL="no")

 if test "x$HAVE_HAL" = "xyes"; then
	AC_DEFINE(HAVE_HAL, 1, [HAL available])
 fi
 
else
	AC_MSG_WARN(["Hal support disabled"])
fi

AC_SUBST(HAL_CFLAGS)
AC_SUBST(HAL_LIBS)

GUCHARMAP_CFLAGS=
GUCHARMAP_LIBS=
PKG_CHECK_MODULES(GUCHARMAP, gucharmap >= 1.4.0,
		  HAVE_GUCHARMAP="yes", HAVE_GUCHARMAP="no")

if test "x$HAVE_GUCHARMAP" = "xyes"; then
	AC_DEFINE(HAVE_GUCHARMAP, 1, [Gucharmap Available])
else
  AC_MSG_WARN([*** 'charpick' applet will not be built with gucharmap support ***])
fi
AC_SUBST(GUCHARMAP_CFLAGS)
AC_SUBST(GUCHARMAP_LIBS)

dnl ******************************************
dnl ** keyboard accessibility status applet check
dnl ******************************************

savecppflags=$CPPFLAGS
CPPFLAGS="$CPPFLAGS $X_CFLAGS"
AC_CHECK_HEADER(X11/extensions/XKB.h, HAVE_XKB=true, HAVE_XKB=false)
AC_SUBST(HAVE_XKB)

AM_CONDITIONAL(APPLET_ACCESSX, $HAVE_XKB)
if test "x$APPLET_ACCESSX" = "xtrue"; then
  AC_MSG_WARN([*** keyboard accessibility status applet will not be built ***])
fi
CPPFLAGS=$savecppflags

dnl ******************************************
dnl ** modemlights applet check             **
dnl ******************************************

SU_TOOL=
P_MODEMLIGHTS=
HAVE_LIBUTIL=

AC_PATH_PROG(SU_TOOL, su)
AC_CHECK_LIB(util, forkpty, HAVE_LIBUTIL=true, HAVE_LIBUTIL=false)
AM_PATH_SYSTEM_TOOLS_BACKENDS($SYSTEM_TOOLS_BACKENDS_REQUIRED, P_MODEMLIGHTS=modemlights)

AM_CONDITIONAL(APPLET_MODEMLIGHTS, test "x$HAVE_LIBUTIL" = "xtrue" -a "x$P_MODEMLIGHTS" = "xmodemlights")

if test "x$SU_TOOL" == "x" -o "x$HAVE_LIBUTIL" != "xtrue" -o "x$P_MODEMLIGHTS" != "xmodemlights"; then
  AC_MSG_WARN([*** modemlights applet will not be built ***])
else
  MODEMLIGHTS_LIBS=" -lutil"
  AC_SUBST(MODEMLIGHTS_LIBS)
  AC_DEFINE_UNQUOTED(STB_SCRIPTS_DIR, "$STB_SCRIPTS_DIR", [System tools backends])
  AC_DEFINE_UNQUOTED(SU_PATH, "${SU_TOOL}", [su executable path])
fi

dnl ******************************************
dnl ** cpufreq applet check                 **
dnl ******************************************

dnl --disable-cpufreq=(yes|no)
AC_ARG_ENABLE(cpufreq,
	      [  --disable-cpufreq[[=no/yes]]            
                          don't build cpu frequency scaling monitor applet
			  [[default: no]]],,
	      disable_cpufreq=no)

dnl --enable-frequency-selector=(yes/no)
AC_ARG_ENABLE(frequency-selector,
	      [  --enable-frequency-selector[[=yes/no]]
	                  build frequency selector [[default: yes]]], ,
	      enable_selector=yes)

dnl --enable-suid=(yes/no)
AC_ARG_ENABLE(suid,
	      [  --enable-suid[[=yes/no]]  suid root the frequency selector executable
	                  [[default: yes]]], ,
	      suid=yes)

PKG_CHECK_MODULES(CPUFREQ_SELECTOR, glib-2.0 >= $GLIB_REQUIRED gobject-2.0 >= $GLIB_REQUIRED)
AC_SUBST(CPUFREQ_SELECTOR_CFLAGS)
AC_SUBST(CPUFREQ_SELECTOR_LIBS)

build_cpufreq_applet=no

if test x$disable_cpufreq = xno; then
   case "${host}" in
      *linux*)
         build_cpufreq_applet=yes
	 ;;
      *)
         AC_MSG_WARN([${host} is not supported by cpufreq applet, not building])
	 build_cpufreq_applet=no
	 ;;
   esac
fi

AM_CONDITIONAL(BUILD_CPUFREQ_APPLET, test x$build_cpufreq_applet = xyes)
AM_CONDITIONAL(BUILD_CPUFREQ_SELECTOR, test x$enable_selector = xyes)
AM_CONDITIONAL(CPUFREQ_SELECTOR_SUID, test x$suid = xyes)


dnl ====================================================================
dnl Code for checking whether IPv6 is to be enabled on the system.
dnl ====================================================================
AC_MSG_CHECKING([whether to enable ipv6])
AC_ARG_ENABLE(ipv6, [  --enable-ipv6 enable IPv6 extensions], ,enable_ipv6=yes)
if test $enable_ipv6 = yes; then

  dnl ====================================================================
  dnl Code for checking presence of AF_INET6 on the system.
  dnl ====================================================================
  AC_TRY_COMPILE([
    #include <sys/types.h>
    #include <sys/socket.h>], [
    socket(AF_INET6, SOCK_STREAM, 0)
    ],
    have_ipv6=yes,
    have_ipv6=no
  )
  AC_MSG_RESULT($have_ipv6)
  if test $have_ipv6 = yes; then
      AC_DEFINE(ENABLE_IPV6, 1, [Define if system is IPv6 enabled])
  fi
fi

dnl =================================================================dnl Code for checking presence of tm.tm_gmtoff on the system.
dnl =================================================================
AC_CHECK_MEMBER([struct tm.tm_gmtoff],[struct_tm_tm_gmtoff=true],[struct_tm_tm_gmtoff=false],[#include <time.h>])
case $struct_tm_tm_gmtoff in
        true)
                AC_DEFINE_UNQUOTED(HAVE_TM_TM_GMOFF, 1, Have the tm.tm_gmtoff member.)
                ;;
        *)
                AC_CHECK_DECL(timezone,AC_DEFINE(HAVE_TIMEZONE,1,Have timezone),,
[
#include <time.h>
])
                ;;
esac

dnl =================================================================
dnl Now we would check for specific function like getaddrinfo.
dnl =================================================================
have_getaddrinfo=no
AC_CHECK_FUNC(getaddrinfo, have_getaddrinfo=yes)
if test $have_getaddrinfo != yes; then
  # getaddrinfo is not in the default libraries.  See if it's in some other.
  for lib in bsd socket inet; do
    AC_CHECK_LIB($lib, getaddrinfo, [LIBS="$LIBS -l$lib";have_getaddrinfo=yes; break])
  done
fi
if test $have_getaddrinfo = yes; then
  AC_DEFINE(HAVE_GETADDRINFO, 1, [Define if getaddrinfo() exists on the system])
fi

dnl =================================================================
dnl End of IPv6 checks
dnl =================================================================

# Honor aclocal flags
ACLOCAL_AMFLAGS="\${ACLOCAL_FLAGS}"
AC_SUBST(ACLOCAL_AMFLAGS)

iconsdir="${datadir}/icons"
AC_SUBST(iconsdir)
pixmapsdir="${datadir}/pixmaps"
AC_SUBST(pixmapsdir)
pkgdatadir="${datadir}/gnome-applets"
AC_SUBST(pkgdatadir)
gladedir="${pkgdatadir}/glade"
AC_SUBST(gladedir)

#defined the below to enable help to work for applets 

AC_DEFINE_DIR(GNOME_ICONDIR, "${iconsdir}", [Gnome Icon Directory])
AC_DEFINE_DIR(GNOME_PIXMAPSDIR, "${pixmapsdir}", [Gnome Pixmaps Directory])
AC_DEFINE_DIR(GNOME_GLADEDIR, "${gladedir}", [Glade Resources Directory])
AC_DEFINE_DIR(DATADIR, "${datadir}", [datadir])
AC_DEFINE_DIR(SYSCONFDIR, "${sysconfdir}", [sysconfdir])
AC_DEFINE_DIR(LIBDIR, "${libdir}", [libdir])
AC_DEFINE_DIR(PREFIX, "$prefix", [install prefix])

AC_OUTPUT([
gnome-applets.spec
Makefile
po/Makefile.in
accessx-status/Makefile
accessx-status/docs/Makefile
accessx-status/pixmaps/Makefile
mini-commander/Makefile
mini-commander/src/Makefile
mini-commander/help/Makefile
mixer/Makefile
mixer/docs/Makefile
drivemount/Makefile
drivemount/help/Makefile
modemlights/Makefile
multiload/Makefile
multiload/docs/Makefile
gkb-new/Makefile
gkb-new/xmodmap/Makefile
gkb-new/xmodmap.sun/Makefile
charpick/Makefile
charpick/help/Makefile
gtik/Makefile
gtik/access/Makefile
gtik/help/Makefile
libgweather/Makefile
libgweather/gweather.pc
gweather/Makefile
gweather/docs/Makefile
geyes/Makefile
geyes/themes/Makefile
geyes/docs/Makefile
battstat/Makefile
battstat/apmlib/Makefile
battstat/sounds/Makefile
battstat/docs/Makefile
man/Makefile
stickynotes/Makefile
stickynotes/pixmaps/Makefile
stickynotes/docs/Makefile
libkbdraw/Makefile
libgswitchit/Makefile
libgswitchit/gswitchit.pc
gswitchit/Makefile
gswitchit/help/Makefile
trashapplet/Makefile
trashapplet/src/Makefile
trashapplet/docs/Makefile
cpufreq/Makefile
cpufreq/src/Makefile
cpufreq/src/cpufreq-selector/Makefile
cpufreq/pixmaps/Makefile
cpufreq/help/Makefile
null_applet/Makefile
])

echo "
gnome-applets-$VERSION configure summary:

	Prefix:				${prefix}
	Source code location:		${srcdir}
	Compiler:			${CC}

	Building:
	 - accessx-status		$HAVE_XKB
	 - battstat			$build_battstat_applet
	 - charpick			always
	 	- gucharmap support	$HAVE_GUCHARMAP
	 - cpufreq			$build_cpufreq_applet
	 	- building selector	$enable_selector
		- enabling suid bit	$suid
	 - drivemount			$build_gnome_vfs_applets
	 - geyes			always
	 - gswitchit			always
	 - gtik				$build_gnome_vfs_applets
	 - gweather			$build_gnome_vfs_applets
	 - mini-commander		$enable_mini_commander
	 - mixer			$HAVE_GST
	 - modemlights
	 - multiload			$build_gtop_applets
	 - stickynotes			always
	 - trashapplet			$build_gnome_vfs_applets
	
	Using HAL:			$HAVE_HAL
	Using GStreamer version:	$HAVE_GST_VER
	Enabling IPv6:			$have_ipv6
" >&2
