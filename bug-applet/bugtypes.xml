<!-- Based on "Bug Taxonomy and Statistics" Appendix, SOFTWARE TESTING
TECHNIQUES, second edition, by Boris Beizer. Copyright (C) 19990 by
Boris Beizer. Reprinted with permission of Van Nostrand Reinhold, New
York. -->

<document>
  <bug num="1xxx">
    <title>Functional bugs: requirements and features</title>
    <desc>Bugs having to do with requirements as specified or as implemented</desc>

    <bug id="11xx">
      <title>Requirements incorrect</title>
      <desc>The requirement or a part of it is incorrect</desc>
      <bug id="111x">
	<title>Incorrect</title>
	<desc>Requirement is wrong</desc>
      </bug>
      <bug id="112x">
	<title>Undesirable</title>
	<desc>Requirement is correct as stated but is not desirable</desc>
      </bug>
      <bug id="113x">
	<title>Not needed</title>
	<desc>Requirement is not needed</desc>
      </bug>
    </bug>
    <bug id="12xx">
      <title>Logic</title>
      <desc>The requirement is illogical or unreasonable</desc>
      <bug id="121x">
	<title>Illogical</title>
	<desc>Illogical, usually because of a self contradiction which can be exposed by a logical analysis of cases</desc>
      </bug>
      <bug id="122x">
	<title>Unreasonable</title>
	<desc>Logical and consistent but unreasonable with respect to the environment and/or budgetary and time constraints</desc>
      </bug>
      <bug id="123x">
	<title>Unachievable</title>
	<desc>Requirement fundamentall impossible or cannot be achieved under existing constraints</desc>
      </bug>
      <bug id="124x">
	<title>Inconsistent, incompatible</title>
	<desc>Requirement is inconsistent with other requirements or with the environment</desc>
	<bug id="1242">
	  <title>Internal</title>
	  <desc>The inconsistency is evident within the specified component</desc>
	</bug>
	<bug id="1244">
	  <title>External</title>
	  <desc>The inconsistency is with external (to the component) components or the environment</desc>
	</bug>
	<bug id="1248">
	  <title>Configuration sensitivity</title>
	  <desc>The incompatibility is with one or more configurations (hardware, software, operating system) in which the component is expected to work</desc>
	</bug>
      </bug>
    </bug>
    <bug id="13xx">
      <title>Completeness</title>
      <desc>The requirement as specified is either ambiguous, incomplete, or overly specified</desc>
      <bug id="131x">
	<title>Incomplete</title>
	<desc>The specification is incomplete; cases, features, variations or attributes are not specified and therefore not implemented</desc>
      </bug>
      <bug id="132x">
	<title>Missing, unspecified</title>
	<desc>The entire requirement is missing</desc>
      </bug>
      <bug id="133x">
	<title>Duplicated, overlapped</title>
	<desc>Specified requirement totally or partially overlaps another requirement either already implemented or specified elsewhere</desc>
      </bug>
      <bug id="134x">
	<title>Overly generalized</title>
	<desc>Requirement as specified is correct and consistent but is overly generalized (e.g., too powerful) for the application</desc>

      </bug>
      <bug id="137x">
	<title>Not downward compatible</title>
	<desc>Requirement as specified will mean that objects created or manipulated by prior versions can either not be processed by this version or will be incorrectly processed</desc>
      </bug>
      <bug id="138x">
	<title>Insufficiently extendable</title>
	<desc>Requirement as specified cannot be expanded in ways that are likely to be needed -- important hooks are left out of specification</desc>
      </bug>
    </bug>
    <bug id="14xx">
      <title>Verifiability</title>
      <desc>Specification bugs having to do with verifying that the requirement was correctly or incorrectly implemented</desc>
      <bug id="141x">
	<title>Unverifiable</title>

	<desc>The requirement, if implemented, cannot be verified by any means or within available time and budget. For example, it is possible to design a test, but the outcome of the test cannot be verified as correct or incorrect</desc>
      </bug>
      <bug id="142x">
	<title>Untestable</title>
	<desc>It is not possible to design and/or execute tests that will verify the requirement. Untestable is stronger than unverifiable.</desc>
      </bug>
    </bug>
    <bug id="15xx">
      <title>Presentation</title>
      <desc>Bugs in the presentation or documentation of requirements. The requirements are presumed to be correct, but the form in which they are presented is not. This can be important for test design automation systems, which demand specific formats.</desc>
      <bug id="152x">
	<title>Presentation, documentation</title>
	<desc>General presentation, documentation, format, media, etc.</desc>
      </bug>
      <bug id="153x">
	<title>Standards</title>
	<desc>Presentation violates standards for requirements</desc>
      </bug>
    </bug>
    <bug id="16xx">
      <title>Requirement changes</title>

      <desc>Requirements, whether or not correct, have been changed between the time programming started and testing ended.</desc>
      <bug id="162x">
	<title>Features</title>
	<desc>Requirement changes concerned with features</desc>
	<bug id="1621">
	  <title>Feature added</title>
	  <desc>A new feature has been added</desc>
	</bug>
	<bug id="1622">
	  <title>Feature deleted</title>
	  <desc>Previously required feature deleted</desc>
	</bug>
	<bug id="1623">
	  <title>Feature changed</title>
	  <desc>Significant changes to feature, other than changes in cases</desc>
	</bug>
      </bug>
      <bug id="163x">
	<title>Cases</title>
	<desc>Cases within a feature have been changed. Feature itself is not significantly modified except for cases</desc>
	<bug id="1631">
	  <title>Cases aded</title>
	</bug>
	<bug id="1632">
	  <title>Cases deleted</title>
	</bug>
	<bug id="1633">
	  <title>Cases changed</title>
	  <desc>Processing or treatment of specific case(s) changed</desc>
	</bug>
      </bug>
      <bug id="164x">
	<title>Domain changes</title>
	<desc>Input data domain modified: e.g., boundary changes, closure, treatment.</desc>
      </bug>
      <bug id="165x">
	<title>User messages and diagnostics</title>
	<desc>Changes in text, content, or conditions under which user prompts, warning, error messages, etc. are produced</desc>
      </bug>
      <bug id="166x">
	<title>Internal interfaces</title>
	<desc>Direct internal interfaces such as call sequences, or indirect interfaces (e.g., via data structures) have been changed</desc>
      </bug>
      <bug id="167x">
	<title>External interfaces</title>
	<desc>External interfaces, such as device drivers, protocols, etc. have been changed</desc>
      </bug>
      <bug id="168x">
	<title>Performance and timing</title>
	<desc>Changes to performance requirements (e.g., throughput) and/or timings</desc>
      </bug>
    </bug>
  </bug>
  <bug id="2xxx">
    <title>Functionality as implemented</title>
    <desc>Requirement known or assumed to be correct, implementable, and testable, but implementation is wrong</desc>
    <bug id="21xx">
      <title>Correctness</title>
      <desc>Having to do with the correctness of the implementation</desc>
      <bug id="211x">
	<title>Feature misunderstood, wrong</title>
	<desc>Feature as implemented is not correct--not as specified</desc>
      </bug>
      <bug id="218x">
	<title>Feature interactions</title>
	<desc>Feature is correctly implemented by itself, but has incorrect interactions with other features, or specified or implied interaction is incorrectly handled</desc>
      </bug>
    </bug>
    <bug id="22xx">
      <title>Completeness, features</title>
      <desc>Having to do with the completeness with which features are implemented</desc>
      <bug id="221x">
	<title>Missing feature</title>
	<desc>An entire feature is missing</desc>
      </bug>
      <bug id="222x">
	<title>Unspecified feature</title>
	<desc>A feature not specified has been implemented</desc>
      </bug>
      <bug id="223x">
	<title>Duplicated, overlapped feature</title>
	<desc>Feature as implemented duplicates or overlaps features implemented by other parts of the software</desc>
      </bug>
    </bug>
    <bug id="23xx">
      <title>Completeness, cases</title>
      <desc>Having to do with the completeness of cases within features</desc>
      <bug id="231x">
	<title>Missing case</title>
      </bug>
      <bug id="232x">
	<title>Extra case</title>
	<desc>Cases that should not have been handled are handled</desc>
      </bug>
      <bug id="233x">
	<title>Duplicated, overlapped case</title>
	<desc>Duplicated handling of cases or partial overlap with other cases</desc>
      </bug>
      <bug id="234x">
	<title>Extraneous output data</title>
	<desc>Data not required are output</desc>
      </bug>
    </bug>
    <bug id="24xx">
      <title>Domains</title>
      <desc>Processing case or feature depends on a combination of input values. A domain bug exists if the wrong processing is executed for the selected input-value combination</desc>
      <bug id="241x">
	<title>Domain misunderstood, wrong</title>
	<desc>Misunderstanding of the size, shape, boundaries, or other characteristics of the specified input domain for the feature or case. Most bugs related to handling extreme cases are domain bugs.</desc>
      </bug>
      <bug id="242x">
	<title>Boundary locations</title>
	<desc>The values of expressions that define a domain boundary are wrong: e.g., "X >= 6" instead of "X >= 3"</desc>
      </bug>
      <bug id="243x">
	<title>Boundary closures</title>
	<desc>End points and boundaries of the domain are incorrectly associated with an adjacent domain: e.g., "X >= 0" instead of "X > 0"</desc>
      </bug>
      <bug id="244x">
	<title>Boundary intersections</title>
	<desc>Domain boundaries are defined by a relation between domain control variables. That relation, as implemented, is incorrect: e.g. "if x > 0 and y > 0 ..." instead of "if x > 0 or y > 0"</desc>
      </bug>
    </bug>
    <bug id="25xx">
      <title>User messages and diagnostics</title>
      <desc>User prompt or printout or other form of communication is incorrect. Processing is assumed to be correct: e.g. a false warning, failure to warn, wrong message, spelling, formats</desc>
    </bug>
    <bug id="26xx">
      <title>Exception conditions mishandled</title>
      <desc>Exception conditions such as illogicals, resource problems, failure modes, which require special handling, are not correctly handled or the wrong exception-handling mechanisms are used</desc>
    </bug>
  </bug>
  <bug id="3xxx">
    <title>Structural bugs</title>
    <desc>Bugs related to the component's structure: i.e. the code</desc>

    <bug id="31xx">
      <title>Control flow and sequencing</title>
      <desc>Bugs specificially related to the control flow of the program or the order and extent to which things are done, as distinct from what is done</desc>
      <bug id="311x">
	<title>General structure</title>
	<desc>General bugs related to component structure</desc>
	<bug id="3112">
	  <title>Unachievable path</title>
	  <desc>A functionally meaningful processing path in the code for which there is no combination of input values that will force that path to be executed. Do not confuse with unreachable code. The code in question might be reached by some other path.</desc>
	</bug>
	<bug id="3114">
	  <title>Unreachable code</title>
	  <desc>Code for which there is no combination of input vaules that will cause that code to be executed</desc>
	</bug>
	<bug id="3116">
	  <title>Dead-end code</title>
	  <desc>Code segments that once entered cannot be exited, even though it was intended that an exit be possible</desc>
	</bug>
      </bug>

      <bug id="312x">
	<title>Control logic and predicates</title>
	<desc>The path taken through a program is directed by control flow predicates (e.g., boolean expressions). This category addresses the implementation of such predicates.</desc>

	<bug id="3122">
	  <title>Duplicated logic</title>
	  <desc>Control logic that should appear only once is inadvertantly duplicated in whole or in part</desc>
	</bug>
	<bug id="3124">
	  <title>Don't care</title>

	  <desc>Improper handling of cases for which what is to be done does not matter either because the case is impossible or it really doesn't matter: e.g., incorrectly assuming that the case is a don't-care case, failure to do case validation, not invoking the correct exception handler, improper logic specification to take advantage of such cases</desc>

	</bug>
	<bug id="3126">
	  <title>Illogicals</title>

	  <desc>Improper identification of, or processing of, illogical or impossible conditions. An illogical is stronger than a don't care. Illogicals usually mean that something bad has happened and that recover is needed.</desc>

	</bug>
	<bug id="3128">
	  <title>Other control-flow predicate bugs</title>

	  <desc>Control-flow problems that can be directly attributed to the incorrect formulation of a control flow predicate: e.g., "IF A&gt;B THEN ..." instead of "IF A&lt;B THEN ..."</desc>
	</bug>
      </bug>

      <bug id="313x">
	<title>Case selection bug</title>

	<desc>Simple bugs in case selections, such as improperly formulated case selection expression, GOTO list, or bug in assigned GOTO</desc>
      </bug>

      <bug id="314x">
	<title>Loops and iteration</title>
	<desc>Bugs having to do with the control of loops</desc>
	<bug id="3141">
	  <title>Initial value</title>
	  <desc>Initial iteration value wrong: e.g. "FOR I = 3 TO 17 ..." instead of "FOR I = 8 TO 17"</desc>
	</bug>
	<bug id="3142">
	  <title>Terminal value or condition</title>

	  <desc>Value, variable, or expression used to control loop termination is incorrect: e.g., "FOR I = 1 TO 7 ..." instead of "FOR I = 1 TO 8"</desc>

	</bug>
	<bug id="3143">
	  <title>Increment value</title>
	  <desc>Value, variable, or expression used to control loop increment value is incorrect: e.g., "FOR I = 1 TO 7 STEP 2" instead of "FOR I = 1 TO 7 STEP 5 ..."</desc>
	</bug>
	<bug id="3144">
	  <title>Iteration variable processing</title>
	  <desc>Where end points and/or increments are controlled by values calculated within the loop's scope, a bug in such calculation</desc>
	</bug>
	<bug id="3148">
	  <title>Exception exit condition</title>
	  <desc>Where specified values or conditions or relations between variables force an abnormal exit to the loop, either incorrect processing of such conditions or incorrect exit mechanism invoked</desc>
	</bug>
      </bug>

      <bug id="315x">
	<title>Control initialization and/or state</title>
	<desc>Bugs having to do with how the program's control flow is initialized and changes of state that affect the control flow: e.g., switches</desc>

	<bug id="3152">
	  <title>Control initialization</title>
	  <desc>Initializing to the wrong state or failing to initialize</desc>
	</bug>
	<bug id="3154">
	  <title>Control state</title>
	  <desc>For state-determined control flows, incorrect transition to a new state from the current state: e.g., input condition X requires a transition to state B</desc>
	</bug>
      </bug>
      <bug id="316x">
	<title>Incorrect exception handling</title>
	<desc>Any incorrect invocation of a control-flow exception handler not previously categorized</desc>
      </bug>
    </bug>

    <bug id="32xx">
      <title>Processing</title>
      <desc>Bugs related to processing under the assumption that the control flow is correct</desc>
      <bug id="321x">
	<title>Algorithmic, fundamental</title>
	<desc>Inappropriate or incorrect algorithm selected, but implemented correctly: e.g., using an incorrect approximation, using a shortcut string search algorithm that assumes string characteristics that may not apply</desc>
      </bug>
      <bug id="322x">
	<title>Expression evaluation</title>
	<desc>Bugs having to do with the way arithmetic, boolean, string, and other expressions are evaluated</desc>
	<bug id="3222">
	  <title>Arithmetic</title>
	  <desc>Bugs related to evaluation of arithmetic expressions</desc>
	  <bug id="3222.1">
	    <title>Operator</title>
	    <desc>Wrong arithmetic operator or function used</desc>
	  </bug>
	  <bug id="3222.2">
	    <title>Parentheses</title>
	    <desc>Syntactically correct bug in placement of parentheses or other arithmetic delimiters</desc>
	  </bug>
	  <bug id="3222.3">
	    <title>Sign</title>
	    <desc>Bug in use of sign</desc>
	  </bug>
	</bug>
	<bug id="3224">
	  <title>Logical or boolean, not control</title>
	  <desc>Bug in the manipulation or evaluation of boolean expressions that are not (directly) part of control-flow predicates: e.g., using wrong mask, AND instead of OR, incorrect simplification of boolean function</desc>
	</bug>
	<bug id="3226">
	  <title>String manipulation</title>
	  <desc>Bug in string manipulation</desc>
	  <bug id="3226.1">
	    <title>Beheading</title>
	    <desc>The beginning of a string is cut off when it should not have been or not cut off when it should have been</desc>
	  </bug>
	  <bug id="3226.2">
	    <title>Curtailing</title>
	    <desc>As for beheading but for string end</desc>
	  </bug>
	  <bug id="3226.3">
	    <title>Concatenation order</title>
	    <desc>Strings are concatenated in wrong order or concatenated when they should not be</desc>
	    <bug id="3226.3.1">
	      <title>Append instead of precede</title>
	    </bug>
	    <bug id="3226.3.2">
	      <title>Precede instead of append</title>
	    </bug>
	  </bug>
	  <bug id="3226.4">
	    <title>Inserting</title>
	    <desc>Having to do with the insertion of one string into another</desc>
	  </bug>
	  <bug id="3226.5">
	    <title>Converting case</title>
	    <desc>Case conversion (upper to lower, say) is incorrect</desc>
	  </bug>
	  <bug id="3226.6">
	    <title>Code conversion</title>
	    <desc>String is converted to another code incorrectly or not converted when it should be</desc>
	  </bug>
	  <bug id="3226.7">
	    <title>Packing, unpacking</title>
	    <desc>Strings are incorrectly packed or unpacked</desc>
	  </bug>
	</bug>
	<bug id="3228">
	  <title>Symbolic, algebraic</title>
	  <desc>Bugs in symbolic processing of algebraic expressions</desc>
	</bug>
      </bug>
      <bug id="323x">
	<title>Initialization</title>
	<desc>Bugs in initialization of variables, expressions, functions, etc. used in processing, excluding initialization bugs assocated with declarations and data statements and loop initialization</desc>
      </bug>
      <bug id="324x">
	<title>Cleanup</title>
	<desc>Incorrect handling of cleanup of temporary data areas, registers, states, etc. associated with processing</desc>
      </bug>
      <bug id="325x">
	<title>Precision, accuracy</title>
	<desc>Insufficient or excessive precision, insufficient accuracy and other bugs related to number representation system used</desc>
      </bug>
      <bug id="326x">
	<title>Execution time</title>
	<desc>Excessive (usually) execution time for processing component</desc>
      </bug>
    </bug>
  </bug>
  <bug id="4xxx">
    <title>Data</title>
    <desc>Bugs in the definition, structure, or use of data</desc>
    <bug id="41xx">
      <title>Data definition, structure, declaration</title>

      <desc>Bugs in the definition, structure, and initialization of data: e.g., in DATA statements. This category applies whether the object is declared statically in source code or created dynamically.</desc>
      <bug id="411x">
	<title>Type</title>
	<desc>The data object type, as declared, is incorrect: e.g., integer instead of floating, short instead of long, pointer instead of integer, array instead of scalar, incorrect user-defined type</desc>
      </bug>
      <bug id="412x">
	<title>Dimension</title>
	<desc>For arrays and other object that have a dimension (e.g., arrays, records, files) by which component objects can be indexed, a bug in the dimension, in the minimum or maximum dimensions, or in redimensioning statements.</desc>
      </bug>
      <bug id="413x">
	<title>Initial default values</title>
	<desc>Bugs in the assigned initial values of the object (e.g., in DATA statements), selection of incorrect default values, or failure to supply a default value if needed</desc>
      </bug>
      <bug id="414x">
	<title>Duplication and aliases</title>
	<desc>Bugs related to the incorrect duplication or failure to create a duplicated object</desc>
        <bug id="4142">
	  <title>Duplicated</title>
	  <desc>Duplicated definition of an object where allowed by the syntax</desc>
        </bug>
        <bug id="4144">
	  <title>Aliases</title>
	  <desc>Object is known by one or more aliases but the specified alias is incorrect; object not aliased when it should have been</desc>
        </bug>
      </bug>
      <bug id="415x">
	<title>Scope</title>
	<desc>The scope, partition, or components to which the object applies is incorrectly specified</desc>
        <bug id="4152">
	  <title>Local should be global</title>
	  <desc>A locally defined object (e.g., within the scope of a specific component) should have been specified more globally (e.g., in COMMON)</desc>
        </bug>
        <bug id="4154">
	  <title>Global should be local</title>
	  <desc>The scope of an object is too global; it should have been declared more locally</desc>
        </bug>
        <bug id="4156">
	  <title>Global/local inconsistency or conflict</title>
	  <desc>A syntactically acceptable conflict between a local and/or global declaration of an object (e.g., incorrect COMMON)</desc>
        </bug>
      </bug>
      <bug id="416x">
	<title>Static/dynamic resources</title>
	<desc>Related to the declaration of static and dynamically allocated resources</desc>
        <bug id="4162">
	  <title>Should be static resources</title>
	  <desc>Resource is defined as a dynamically allocated object but should have been static (e.g., permanent)</desc>
        </bug>
        <bug id="4164">
	  <title>Should be dynamic resource</title>
	  <desc>Resource is defined as static but should have been declared as dynamic</desc>
        </bug>
        <bug id="4166">
	  <title>Insufficient resources, space</title>
	  <desc>Number of specified resources is insufficient or there is insufficient space (e.g., main memory, cache, registers, disc) to hold the declared resources</desc>
        </bug>
        <bug id="4168">
	  <title>Data overlay bug</title>
	  <desc>Data objects are to be overlaid but there is a bug in the specification of the overlay areas</desc>
        </bug>
      </bug>
    </bug>
    <bug id="42xx">
      <title>Data access and handling</title>
      <desc>Having to do with access and manipulation of data objects that are presumed to be correctly defined</desc>
      <bug id="421x">
	<title>Type</title>
	<desc>Bugs having to do with the object type</desc>
        <bug id="4212">
	  <title>Wrong type</title>
	  <desc>Object type is incorrect for required processing: e.g. multiplying two strings</desc>
        </bug>
        <bug id="4214">
	  <title>Type transformation</title>
	  <desc>Object undergoes incorrect type transformation: e.g., integer to floating, pointer to integer, specified type transformation is not allowed, required type transformation not done. Note: type transformation bugs can exist in any language, whether or not it is strongly typed, whether or not there are user-defined types</desc>
        </bug>
        <bug id="4216">
	  <title>Scaling, units</title>
	  <desc>Scaling or units (semantic) associated with object is incorrect, incorrectly transformed, or not transformed: e.g., FOOT-POUNDS to STONE-FURLONGS</desc>
        </bug>
      </bug>
      <bug id="422x">
	<title>Dimension</title>
	<desc>For dynamically variable dimensions of a dimensioned object, a bug in the dimension: e.g., dynamic redimension of arrays, exceeding maximum file length, removing one more than the minimum number of records</desc>
      </bug>
      <bug id="423x">
	<title>Value</title>
	<desc>Having to do with the value of data objects or parts thereof</desc>
        <bug id="4232">
	  <title>Initialization</title>
	  <desc>Initialization or default value of object is incorrect. Not to be confused with initialization and default bugs in declarations. This is a dynamic initialization bug.</desc>
        </bug>
        <bug id="4234">
	  <title>Constant value</title>
	  <desc>Incorrect constant value for an object: e.g., a constant in an expression</desc>
        </bug>
      </bug>
      <bug id="424x">
	<title>Duplication and aliases</title>
	<desc>Bugs in dynamic (run time) duplication and aliasing of objects</desc>
        <bug id="4242">
	  <title>Object already exists</title>
	  <desc>Attempt to create an object that already exists</desc>
        </bug>
        <bug id="4244">
	  <title>No such object</title>
	  <desc>Attempted reference to an object that does not exist</desc>
        </bug>
      </bug>
      <bug id="426x">
	<title>Resources</title>
	<desc>Having to do with dynamically allocated resources and resource pools, in whatever memory media they exist: main, cache, disc, bulk RAM. Included are queue blocks, control blocks, buffer blocks, heaps, files</desc>
        <bug id="4262">
	  <title>No such resource</title>
	  <desc>Referenced resource does not exist</desc>
        </bug>
        <bug id="4264">
	  <title>Wrong resource type</title>
	  <desc>Wrong resource type referenced</desc>
        </bug>
      </bug>
      <bug id="428x">
	<title>Access</title>
	<desc>Having to do with the access of objects as distinct from the manipulation of objects. In this context, accesses include read, write, modify and (in some instances) create and destroy</desc>
        <bug id="4281">
	  <title>Wrong object accessed</title>
	  <desc>Incorrect object accessed: e.g., "X := ABC33" instead of "X := ABD33"</desc>
        </bug>
        <bug id="3282">
	  <title>Access rights violation</title>
	  <desc>Access rights are controlled by attributes associated with the caller and the object. For example, some callers can only read the object, others can read and modify. Violations of object access rights are included in this category whether or not a formal access rights mechanism exists; that is, access rights could be specified by programming conventions rather than software</desc>
        </bug>
        <bug id="4283">
	  <title>Data-flow anomaly</title>
	  <desc>Data-flow anomalies involve the sequence of accesses to an object: e.g., reading or initializing an object before it has been created, or creating and then not using</desc>
        </bug>
        <bug id="4284">
	  <title>Interlock bug</title>
	  <desc>Where objects are in simultaneous use by more than one caller, interlocks and synchronization mechanisms may be used to ensure that all data are current and changed by only one caller at a time. These are not bugs in the interlock or synchronization mechanism but in the use of that mechanism</desc>
        </bug>
        <bug id="4285">
	  <title>Saving or protecting bug</title>

	  <desc>Application requires that the object be saved or otherwise protected in different program states or, alternatively, not protected. These bugs are related to the incorrect usage of such protection mechanisms or procedures.</desc>
        </bug>
        <bug id="4286">
	  <title>Restoration bug</title>
	  <desc>Application requires that a previously saved object be restored prior to processing: e.g., POP the stack, restore registers after interrupt. This category includes bugs in the incorrect restoration of data objects and not bugs in the implementation of the restoration mechanism.</desc>
        </bug>
        <bug id="4287">
	  <title>Access mode, direct/indirect</title>
	  <desc>Object is accessed by wrong means: e.g., direct access of an object for which indirect access is required; call by value instead of name, or vice versa; indexed instead of sequential, or vice versa</desc>
        </bug>
        <bug id="4288">
	  <title>Object boundary or structure</title>
	  <desc>Access to object is partly correct, but the object structure and its boundaries are handled incorrectly: e.g., fetching 8 characters of a string instead of a 7, mishandling word boundaries, getting too much or too little of an object</desc>
        </bug>
      </bug>
    </bug>
  </bug>
  <bug id="5xxx">
    <title>Implementation</title>
    <desc>Bugs having to do with the implementation of the software. Some of these, such as standards and documentation, may not affect the actual workings of the software. They are included in the bug taxonomy because of their impact on maintainance</desc>
    <bug id="51xx">
      <title>Coding and typographical</title>
      <desc>Bugs that can be clearly attributed to simple coding, as well as typographical bugs. Classification of a bug in this category is subjective. If a programmer believed that the correct variable, say, was "ABCD" instead of "ABCE", then it would be classified as a 4281 bug (wrong object accessed). Conversely, if E was changed to D because of a typewriting bug, then it belongs here</desc>
      <bug id="511x">
	<title>Coding wild card, typographical</title>
	<desc>All bugs that can be reasonably attributed to typing and other typographical bugs</desc>
      </bug>
      <bug id="512x">
	<title>Instruction, construct misunderstood</title>
	<desc>All bugs that can be reasonably attributed to a misunderstanding of an instruction's operation or HOL statement's action</desc>
      </bug>
    </bug>
    <bug id="52xx">
      <title>Standards violation</title>
      <desc>Bugs having to do with violating or misunderstanding the applicable programming standards and conventions. The software is assumed to work properly</desc>
      <bug id="521x">
	<title>Structure violations</title>
	<desc>Violations concerning control-flow structure. organization of the software, etc.</desc>
        <bug id="5212">
	  <title>Control flow</title>
	  <desc>Violations of control-flow structure conventions: e.g., excessive IF-THEN-ELSE nesting, not using CASE statements where required, not following dictated processing order, jumping into or out of loops, jumping into or out of decisions</desc>
        </bug>
        <bug id="5214">
	  <title>Complexity</title>
	  <desc>Violation of maximum (usually) or minimum (rare) complexity guidelines as measured by some specified complexity metric: e.g., too many lines of code in module, cyclomatic complexity greater than 200, excessive Halstead length, too many tokens</desc>
        </bug>
        <bug id="5215">
	  <title>Loop nesting depth</title>
	  <desc>Excessive loop nesting depth</desc>
        </bug>
        <bug id="5216">
	  <title>Modularity and partition</title>
	  <desc>Modularity and partition rules not followed: e.g., minimum and maximum size, object scope, functionally dictated partitions</desc>
        </bug>
        <bug id="5217">
	  <title>Call nesting depth</title>
	  <desc>Violations of component (e.g. subroutine, subprogram, function) maximum nesting depth, or insufficient depth where dictated</desc>
        </bug>
      </bug>
      <bug id="522x">
	<title>Data definition, declarations</title>
	<desc>The form and/or location of data object declaration is not according to standards</desc>
      </bug>
      <bug id="523x">
	<title>Data access</title>
	<desc>Violations of conventions governing how data objects of different kinds are to be accessed, wrong kind of object used: e.g., not using field-access macros, direct access instead of indirect, absolute reference instead of symbolic, access via register, etc.</desc>
      </bug>
      <bug id="524x">
	<title>Calling and invoking</title>
	<desc>Bugs in the manner in which other processing components are called, invoked, or communicated with: e.g. a direct subroutine call that should be indirect, violation of call and return sequence conventions</desc>
      </bug>
      <bug id="526x">
	<title>Mnemonics, label conventions</title>
	<desc>Violations of the rules by which names are assigned to objects: e.g. program labels, subroutine and program names, data object names, file names</desc>
      </bug>
      <bug id="527x">
	<title>Format</title>
	<desc>Violations of conventions governing the overall format and appearance of the source code: indentation rules, pagination, headers, ID block, special markers</desc>
      </bug>
      <bug id="528x">
	<title>Comments</title>
	<desc>Violations of conventions governing the use, placement, density, and format of comments. The content of comments is covered by 53xx, documentation</desc>
      </bug>
    </bug>
    <bug id="53xx">
      <title>Documentation</title>
      <desc>Bugs in the documentation associated with the code or the content of comments contained in the code</desc>
      <bug id="531x">
	<title>Incorrect</title>
	<desc>Documentation statement is wrong</desc>
      </bug>
      <bug id="532x">
	<title>Inconsistent</title>
	<desc>Documentation statement is inconsistent with itself or with other statements</desc>
      </bug>
      <bug id="533x">
	<title>Incomprehensible</title>
	<desc>Documentation cannot be understood by a qualified reader</desc>
      </bug>
      <bug id="534x">
	<title>Incomplete</title>
	<desc>Documentation is correct but important facts are missing</desc>
      </bug>
      <bug id="535x">
	<title>Missing</title>
	<desc>Major parts of documentation are missing</desc>
      </bug>
    </bug>
  </bug>
  <bug id="6xxx">
    <title>Integration</title>
    <desc>Bugs having to do with the integration of, and interfaces between, components. The components themselves are assumed to be correct</desc>
    <bug id="61xx">
      <title>Internal interfaces</title>
      <desc>Bugs related to the interfaces between communicating components with the program under test. The components are assumed to have passed their component level test. The component are assumed to have passed their component-level tests. In this context, direct or indirect transfer of data or control information via a memory object such as tables, dynamically allocated resources, or files, constitute an internal interface.</desc>
      <bug id="611x">
	<title>Component invocation</title>
	<desc>Bugs having to do with how software components are invoked. In this sense, a "component" can be a subroutine, function, macro, program, program segment, or any other sensible processing component. Note the use of "invoke" rather than "call," because there may be no actual call as such: e.g., a task order placed on a processing queue is an invocation in our sense, though (typically) not a call</desc>
	<bug id="6111">
	  <title>No such component</title>
	  <desc>Invoked component does not exist</desc>
	</bug>
	<bug id="6112">
	  <title>Wrong component</title>
	  <desc>Incorrect component invoked</desc>
	</bug>
      <bug id="612x">
	<title>Interface parameter, invocation</title>
	<desc>Having to do with the parameters of the invocation, their number, order, type, location, values, etc.</desc>
        <bug id="6121">
	  <title>Wrong paremter</title>
	  <desc>Parameters of the invocation are incorrectly specified</desc>
        </bug>
        <bug id="6122">
	  <title>Parameter type</title>
	  <desc>Incorrect invocation parameter type used</desc>
        </bug>
        <bug id="6124">
	  <title>Parameter structure</title>
	  <desc>Structural details of parameter used are incorrect: e.g., size, number of fields, subtypes</desc>
        </bug>
        <bug id="6125">
	  <title>Parameter value</title>
	  <desc>Value (numerical, boolean, string) of the parameter is wrong</desc>
        </bug>
        <bug id="6126">
	  <title>Parameter sequence</title>
	  <desc>Parameters of the invocation sequence in the wrong order, too many parameters, too few parameters</desc>
        </bug>
      </bug>
      </bug>
      <bug id="613x">
	<title>Component invocation return</title>
	<desc>Having to do with the interpretation of parameters provided by the invoked component on return to the invoking component or on release of control to some other component. In this context, a record, a subroutine return sequence, or afile can qualify for this category of bug. Note that the bugs included here are not bugs in the component that created the return data but in the receiving component's subsequent manipulation and interpretation of that data</desc>
        <bug id="6131">
	  <title>Parameter identity</title>
	  <desc>Wrong return parameter accessed</desc>
        </bug>
        <bug id="6132">
	  <title>Parameter type</title>
	  <desc>Wrong return parameter type used; that is, the component using the return data interprets a return parameter incorrectly as to type</desc>
        </bug>
        <bug id="6134">
	  <title>Parameter structure</title>
	  <desc>Return parameter structure misinterpreted</desc>
        </bug>
        <bug id="6136">
	  <title>Return sequence</title>
	  <desc>Sequence assumed for return parameters is incorrect</desc>
        </bug>
      </bug>
      <bug id="614x">
	<title>Initialization, state</title>
	<desc>Invoked component not initialized or initialized to the wrong state or with incorrect data</desc>
      </bug>
      <bug id="615x">
	<title>Invocation in wrong place</title>
	<desc>The place or state in the invoking component at which the invoked component was invoked is wrong</desc>
      </bug>
      <bug id="616x">
	<title>Duplicate or spurious invocation</title>
	<desc>Component should not have been invoked or has been invoked more often than necessary</desc>
      </bug>
    </bug>
    <bug id="62xx">
      <title>External interfaces and timing</title>
      <desc>Having to do with external interfaces, such as I/O devices and/or drivers, or other software not operating under the same control structure. Data passage by files or messages qualify for this bug category</desc>
      <bug id="621x">
	<title>Interrupts</title>
	<desc>Bugs related to incorrect interrupt handling or setting
	up for interrupts: e.g., wrong handler invoked, failure to
	block or unblock interrupts</desc>
      </bug>
      <bug id="622x">
	<title>Devices and drivers</title>
	<desc>Incorrect interface with dveices or device drivers or incorrect interpretation of return status data</desc>
        <bug id="6222">
	  <title>Device, driver, initialization or state</title>
	  <desc>Incorrect initialization of device or driver, failure to initialize, setting device to the wrong state</desc>
        </bug>
        <bug id="6224">
	  <title>Device, driver, command bug</title>
	  <desc>Bug in the command issued to a device or driver</desc>
        </bug>
        <bug id="6226">
	  <title>Device, driver, return/status misinterpretation</title>
	  <desc>Return status data from device or driver misinterpreted or ignored</desc>
        </bug>
      </bug>
      <bug id="623x">
	<title>I/O timing or throughput</title>
	<desc>Bugs having to do with timings and data rates for external devices such as : not meeting specified timing requirements (too long or too short), forcing too much throughput, not accepting incoming data rates</desc>
      </bug>
    </bug>
  </bug>
  <bug id="7xxx">
    <title>System and software architecture</title>
    <desc>Bugs that are not attributable to a component or to the interface between components but affect the entire software system or stem from architectural errors in the system</desc>
    <bug id="71xx">
      <title>OS bug</title>
      <desc>Bugs related to the use of operating system facilities. Not to be confused with bugs in the operating system itself</desc>
      <bug id="711x">
	<title>Invocation, command</title>
	<desc>Erroneous command given to operating system or OS facility incorrectly invoked</desc>
      </bug>
      <bug id="712x">
	<title>Return data, status misinterpretation</title>
	<desc>Data returned from operating system or status information ignored or misinterpreted</desc>
      </bug>
      <bug id="714x">
	<title>Space</title>
	<desc>Required memory (cache, disc, RAM) resource not available or requested in the wrong way</desc>
      </bug>
    </bug>
    <bug id="72xx">
      <title>Software architecture</title>
      <desc>Architectural problems not elsewhere defined</desc>
      <bug id="721x">
	<title>Interlocks and semaphores</title>
	<desc>Bugs in the use of interlock mechanisms and interprocess mechanisms and interprocess communications facilities. Not to be confused with bugs in these mechanisms themselves: e.g., failure to lock, failure to unlock, failure to set or reset semaphores, duplicate locking</desc>
      </bug>
      <bug id="722x">
	<title>Priority</title>
	<desc>Bugs related to task priority: e.g., priority too low or too high, priority selected not allowed, priority conflicts</desc>
      </bug>
      <bug id="723x">
	<title>Transaction-flow control</title>
	<desc>Where the path taken by a transaction through the system is controlled by an implicit or explicit transaction flow-control mechanism, these are bugs related to the definition of such flows. Note that all components and their interfaces could be correct but this kind of bug could still exist</desc>
      </bug>
      <bug id="724x">
	<title>Resource management and control</title>
	<desc>Bugs related to the management of dynamically allocated shared resource objects: e.g., not returning a buffer block after use, not getting an object, failure to clean up an object after use, getting wrong kind of object, returning object to wrong pool</desc>
      </bug>
      <bug id="725x">
	<title>Recursive calls</title>
	<desc>Bugs in the use of recursive invocation of software components or incorrect recursive invocation</desc>
      </bug>
      <bug id="726x">
	<title>Reentrance</title>
	<desc>Bugs related to the reentrance of program components</desc>
      </bug>
    </bug>
    <bug id="73xx">
      <title>Recovery, accountability</title>
      <desc>Bugs related to the recovery of objects after failure and to the accountability for objects despite failures</desc>
    </bug>
    <bug id="74xx">
      <title>Performance</title>
      <desc>Bugs related to the throughput-delay behaviour of software under the assumption that all other aspects are correct</desc>
      <bug id="741x">
	<title>Throughput inadequate</title>
      </bug>
      <bug id="742x">
	<title>Response time, delay</title>
	<desc>Response time to incoming events too long at specified load or too short (rare), delay between outgoing events too long or too short</desc>
      </bug>
      <bug id="743x">
	<title>Insufficient users</title>
	<desc>Maximum specified number of simultaneous users or taskss cannot be accommodated at specified transaction delays</desc>
      </bug>
      <bug id="748x">
	<title>Performance parasites</title>
	<desc>Any bug whose primary or only symptom is a performance degredation: e.g., the harmless but needless repetition of operations, fetching and returning more dynamic resources than needed</desc>
      </bug>
    </bug>
    <bug id="75xx">
      <title>Incorrect diagnostic, exception</title>
      <desc>Diagnostic or error message incorrect or misleading. Exception handler invoked is wrong</desc>
    </bug>
    <bug id="76xx">
      <title>Partitions and overlays</title>
      <desc>Memory or virtual memory is incorrectly partitioned,
      overlay to wrong area, overlay or partition conflicts</desc>
    </bug>
    <bug id="77xx">
      <title>Sysgen or environment</title>
      <desc>Wrong operating system version, incorrect system generation, or other host environment problem</desc>
    </bug>
  </bug>
  <bug id="8xxx">
    <title>Test definition or execution bugs</title>
    <desc>Bugs in the definition, design, execution of tests or the data used in tests. These are as important as "real" bugs</desc>
    <bug id="81xx">
      <title>Design bugs</title>
      <desc>Bugs in the design of tests</desc>
      <bug id="811x">
	<title>Requirements misunderstood</title>
	<desc>Test and component are mismatched because test designer did not understand requirements</desc>
      </bug>
      <bug id="812x">
	<title>Incorrect outcome predicted</title>
	<desc>Predicted outcome of test does not match required or actual outcome</desc>
      </bug>
      <bug id="813x">
	<title>Incorrect path predicted</title>
	<desc>Outcome is correct but was achieved by the wrong predicted path. The test is only coincidentally correct</desc>
      </bug>
      <bug id="814x">
	<title>Test initialization</title>
	<desc>Specified initial conditions for test are wrong</desc>
      </bug>
      <bug id="815x">
	<title>Test data structure or value</title>
	<desc>Data objects used in tests or their values are wrong</desc>
      </bug>
      <bug id="816x">
	<title>Sequencing bug</title>
	<desc>The sequence in which tests are to be executed, relative
	to other tests or to test initialization, is wrong</desc>
      </bug>
      <bug id="817x">
	<title>Configuration</title>
	<desc>The hardware and/or software ocnfiguration and/or environment specified for the test is wrong</desc>
      </bug>
      <bug id="818x">
	<title>Verification method, criteria</title>
	<desc>The method by which the outcome will be verified is incorrect or impossible</desc>
      </bug>
    </bug>
    <bug id="82xx">
      <title>Execution bugs</title>
      <desc>Bugs in the execution of tests as contrasted with bugs in their design</desc>
      <bug id="821x">
	<title>Initialization</title>
	<desc>Tested component not initialized to the right state or values</desc>
      </bug>
      <bug id="822x">
	<title>Keystroke or command</title>
	<desc>Simple keystroke or button hit error</desc>
      </bug>
      <bug id="823x">
	<title>Database</title>
	<desc>Database used to support the test was wrong</desc>
      </bug>
      <bug id="824x">
	<title>Configuration</title>
	<desc>Configuration and/or environment specified for the test was not used during the run</desc>
      </bug>
      <bug id="828x">
	<title>Verification act</title>
	<desc>The act of verifying the outcome was incorrectly executed</desc>
      </bug>
    </bug>
    <bug id="83xx">
      <title>Test documentation</title>
      <desc>Documentation of test case or verifcation criteria is incorrect or misleading</desc>
    </bug>
    <bug id="84xx">
      <title>Test case completeness</title>
      <desc>Cases required to achieve specified coverage criteria are missing</desc>
    </bug>
  </bug>
</document>
